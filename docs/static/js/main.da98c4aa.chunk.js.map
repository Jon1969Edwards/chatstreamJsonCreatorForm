{"version":3,"sources":["Rating.tsx","RatingControl.tsx","ratingControlTester.ts","MyGroup.jsx","App.tsx","index.tsx"],"names":["Rating","id","value","updateValue","useState","hoverAt","setHoverAt","className","style","cursor","map","i","fullStars","onMouseOver","onMouseOut","onClick","withJsonFormsControlProps","data","handleChange","path","newValue","rankWith","scopeEndsWith","myGroupTester","uiTypeIs","withJsonFormsLayoutProps","props","uischema","schema","visible","renderers","layoutProps","elements","direction","Hidden","xsUp","ExpansionPanel","ExpansionPanelSummary","expandIcon","Typography","label","ExpansionPanelDetails","useStyles","makeStyles","_theme","container","padding","width","title","textAlign","dataContent","display","justifyContent","borderRadius","backgroundColor","marginBottom","resetButton","margin","demoform","initialData","materialRenderers","tester","ratingControlTester","renderer","RatingControl","MyGroupRenderer","App","classes","displayDataAsString","setDisplayDataAsString","jsonformsData","setJsonformsData","useEffect","JSON","stringify","Grid","justify","spacing","item","sm","variant","Generate","uiSchema","cells","materialCells","onChange","errors","Button","color","theme","createMuiTheme","overrides","MuiFormControl","root","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.da98c4aa.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\ninterface RatingProps {\n  id?: string;\n  value: number;\n  updateValue: (newValue: number) => void;\n}\n\nexport const Rating: React.FC<RatingProps> = ({ id, value, updateValue }) => {\n  const [hoverAt, setHoverAt] = useState<number | null>(null);\n\n  return (\n    <div id='#/properties/rating' className='rating'>\n      <p>Rating:</p>\n      <span style={{ cursor: 'pointer' }}>\n        {[0, 1, 2, 3, 4].map((i) => {\n          const fullStars = hoverAt ?? value;\n\n          return (\n            <span\n              onMouseOver={() => setHoverAt(i + 1)}\n              onMouseOut={() => setHoverAt(null)}\n              onClick={() => updateValue(i + 1)}\n              key={`${id}_${i}`}\n            >\n              {i < fullStars ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </span>\n    </div>\n  );\n};\n","import { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    updateValue={(newValue: number) => handleChange(path, newValue)}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","import { MaterialLayoutRenderer } from '@jsonforms/material-renderers';\nimport {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Hidden,\n  Typography,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport React from 'react';\nimport { withJsonFormsLayoutProps } from '@jsonforms/react';\nimport { rankWith, uiTypeIs } from '@jsonforms/core';\n\nexport const myGroupTester = rankWith(1000, uiTypeIs('Group'));\n\nconst MyGroupRenderer = (props) => {\n  const { uischema, schema, path, visible, renderers } = props;\n\n  const layoutProps = {\n    elements: uischema.elements,\n    schema: schema,\n    path: path,\n    direction: 'column',\n    visible: visible,\n    uischema: uischema,\n    renderers: renderers,\n  };\n  return (\n    <Hidden xsUp={!visible}>\n      <ExpansionPanel>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography>{uischema.label}</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <MaterialLayoutRenderer {...layoutProps} />\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </Hidden>\n  );\n};\n\nexport default withJsonFormsLayoutProps(MyGroupRenderer);\n","import { Fragment, useState, useEffect } from 'react';\nimport { JsonForms } from '@jsonforms/react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { Generate } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers,\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MyGroupRenderer, { myGroupTester } from './MyGroup';\n\nconst useStyles = makeStyles((_theme) => ({\n  container: {\n    padding: '1em',\n    width: '100%',\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em',\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece',\n    marginBottom: '1rem',\n  },\n  resetButton: {\n    margin: 'auto',\n    display: 'block',\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem',\n  },\n}));\n\nconst initialData = {};\n\nconst renderers = [\n  ...materialRenderers,\n  //register custom renderers\n  { tester: ratingControlTester, renderer: RatingControl },\n  { tester: myGroupTester, renderer: MyGroupRenderer },\n];\n\nconst App = () => {\n  const classes = useStyles();\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [jsonformsData, setJsonformsData] = useState<any>(initialData);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(jsonformsData, null, 2));\n  }, [jsonformsData]);\n\n  const clearData = () => {\n    setJsonformsData({});\n  };\n\n  return (\n    <Fragment>\n      <div className='App'>\n        <header className='App-header'>\n          {/* <img src={logo} className='App-logo' alt='logo' /> */}\n          <h1 className='App-title'>\n            Welcome to Chatstream Forms JSON Creator\n          </h1>\n          <p className='App-intro'></p>\n        </header>\n      </div>\n\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={6}>\n          <Typography variant={'h3'} className={classes.title}>\n            JSON Form\n          </Typography>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={Generate.uiSchema(schema)}\n              data={jsonformsData}\n              renderers={renderers}\n              cells={materialCells}\n              onChange={({ errors, data }) => setJsonformsData(data)}\n            />\n          </div>\n        </Grid>\n        <Grid item sm={6}>\n          <Typography variant={'h3'} className={classes.title}>\n            JSON Data\n          </Typography>\n          <div className={classes.dataContent}>\n            <pre id='boundData'>{displayDataAsString}</pre>\n          </div>\n          <Button\n            className={classes.resetButton}\n            onClick={clearData}\n            color='primary'\n            variant='contained'\n          >\n            Clear data\n          </Button>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/**\n * Customize form so each control has more space\n */\nconst theme = createMuiTheme({\n  overrides: {\n    MuiFormControl: {\n      root: {\n        margin: '0.8em 0',\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}